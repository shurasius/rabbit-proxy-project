AWSTemplateFormatVersion: 2010-09-09
Description: RabbitMQ under a nginx proxy project
Parameters:
  BuildVersion:
    Description: Version of the deploying build
    Type: String
    Default: rabbit_artifact_35.tar
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance
    Type: 'AWS::EC2::KeyPair::KeyName'
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
  InstanceType:
    Description: WebServer EC2 instance type
    Type: String
    Default: t2.micro
    AllowedValues:      
      - t2.micro
    ConstraintDescription: must be a valid EC2 instance type.
  SSHLocation:
    Description: The IP address range that can be used to SSH to the EC2 instances
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 0.0.0.0/0
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
  VPC:
    Description: necessary VPC
    Type: AWS::EC2::VPC::Id
  Subnets:
    Type: "List<AWS::EC2::Subnet::Id>"
Mappings: 
  RegionMap: 
    us-east-1: 
      "HVM64": "ami-059eeca93cf09eebd"
    us-east-2: 
      "HVM64": "ami-0782e9ee97725263d"  
    us-west-1: 
      "HVM64": "ami-0ad16744583f21877"
    us-west-2: 
      "HVM64": "ami-0e32ec5bc225539f5"
Resources:
  S3Role:
    Type: "AWS::IAM::Role"
    Properties: 
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement: 
          -
            Effect: "Allow"
            Principal: 
              Service: 
                - "ec2.amazonaws.com"
            Action: 
              - "sts:AssumeRole"
      Path: "/"
  S3RolePolicies:
    Type: "AWS::IAM::Policy"
    Properties: 
      PolicyName: "S3Policy"
      PolicyDocument:
        Version: "2012-10-17"
        Statement: 
          -
            Effect: "Allow"
            Action: 
              - "s3:PutObject"
              - "s3:GetObject"
            Resource: "*"
      Roles:
        -
          Ref: "S3Role"
  S3PolicyProfile:
     Type: "AWS::IAM::InstanceProfile"
     Properties: 
       Path: "/"
       Roles: 
         - 
           Ref: "S3Role"
  NginxELBSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Add port to Internet
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: 0.0.0.0/0          
  NginxSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Enable ssh and http
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: !Ref SSHLocation
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          SourceSecurityGroupId: !GetAtt NginxELBSecurityGroup.GroupId    
  RabbitELBSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Enable ssh and nginx instances
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '15672'
          ToPort: '15672'
          SourceSecurityGroupId: !GetAtt NginxSecurityGroup.GroupId
  RabbitSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Enable ssh and nginxSG
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: !Ref SSHLocation
        - IpProtocol: tcp
          FromPort: '15672'
          ToPort: '15672'
          SourceSecurityGroupId: !GetAtt RabbitELBSecurityGroup.GroupId        
  NginxLoadBalancer: 
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      SecurityGroups: 
        - Fn::GetAtt: ['NginxELBSecurityGroup', 'GroupId']
      Subnets: !Ref Subnets
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: '50'
  RabbitLoadBalancer: 
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internal
      SecurityGroups: 
        - Fn::GetAtt: ['RabbitELBSecurityGroup', 'GroupId']
      Subnets: !Ref Subnets
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: '50'
  NginxTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Protocol: HTTP
      Port: 80
      VpcId: !Ref VPC
      HealthCheckIntervalSeconds: 30
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 10
      HealthyThresholdCount: 4
      Matcher:
        HttpCode: '200'
      UnhealthyThresholdCount: 3
  RabbitTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Protocol: HTTP
      Port: 15672
      VpcId: !Ref VPC
      HealthCheckIntervalSeconds: 30
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 10
      HealthyThresholdCount: 4
      Matcher:
        HttpCode: '200'
      UnhealthyThresholdCount: 3
  NginxListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn:
            Ref: NginxTargetGroup
      LoadBalancerArn:
        Ref: NginxLoadBalancer
      Port: '80'
      Protocol: HTTP
  RabbitListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn:
            Ref: RabbitTargetGroup
      LoadBalancerArn:
        Ref: RabbitLoadBalancer
      Port: '15672'
      Protocol: HTTP        
  NginxLaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId: !FindInMap [RegionMap, !Ref "AWS::Region", HVM64]
      InstanceType: !Ref InstanceType
      IamInstanceProfile:
        Ref: "S3PolicyProfile"
      SecurityGroups:
        - !Ref NginxSecurityGroup
      KeyName: !Ref KeyName
      UserData: 
        Fn::Base64: !Sub |
          #!/bin/bash
          sudo apt-get update
          sudo apt-get upgrade -y
          sudo apt-get install nginx -y
          sudo apt-get install awscli -y
          sudo echo "upstream rabbitmq {server ${RabbitLoadBalancer.DNSName}:15672;} server {  listen  80;  server_name ~^(.+)$;  root /var/www/html; location /rabbit-mgmt/ {   proxy_pass      http://rabbitmq/;  }}" > rabbitmq.conf
          sudo mv rabbitmq.conf /etc/nginx/sites-available/
          sudo ln -s /etc/nginx/sites-available/rabbitmq.conf /etc/nginx/sites-enabled/
          cd /var/www/html/
          sudo aws s3 cp s3://rabbit-builds-storage/${BuildVersion} /var/www/html/
          sudo tar -xvf ${BuildVersion}
          sudo service nginx restart
  RabbitLaunchConfiguration:  
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId: !FindInMap [RegionMap, !Ref "AWS::Region", HVM64]
      InstanceType: !Ref InstanceType
      SecurityGroups:
        - !Ref RabbitSecurityGroup
      KeyName: !Ref KeyName
      UserData: 
        Fn::Base64: !Sub |
          #!/bin/bash
          sudo apt-get update
          sudo apt-get upgrade -y      
          sudo apt-get install rabbitmq-server -y
          sudo systemctl start rabbitmq-server.service
          sudo systemctl enable rabbitmq-server.service
          sudo rabbitmq-plugins enable rabbitmq_management
          sudo chown -R rabbitmq:rabbitmq /var/lib/rabbitmq/ 
  NginxAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AvailabilityZones: 
        Fn::GetAZs: ""
      MaxSize: "3"
      MinSize: "3"
      LaunchConfigurationName: 
        Ref: "NginxLaunchConfiguration"
      Cooldown: "60"
      TargetGroupARNs:
        - Ref: "NginxTargetGroup"
  RabbitAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AvailabilityZones: 
        Fn::GetAZs: ""
      MaxSize: "1"
      MinSize: "1"
      LaunchConfigurationName: 
        Ref: "RabbitLaunchConfiguration"
      Cooldown: "60"
      TargetGroupARNs:
        - Ref: "RabbitTargetGroup"
  Outputs:
    LoadBalancerDNSName: 
      Description: The DNSName of the load balancer
      Value: !GetAtt NginxLoadBalancer.DNSName
      Condition: CreateProdResources
       
  